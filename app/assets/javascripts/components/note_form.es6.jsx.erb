class NoteForm extends React.Component {
  constructor(props, context) {
    super(props, context);

    this.state = {
      uid: this.props.uid,
      title: this.props.title,
      content: this.props.content
    };
  }

  render() {
    return (
      <form className="simple_form form-horizontal" onSubmit={this.handleFormSubmit}>
        <div className="form-inputs">
          <div className="form-group form-group-no-label string optional note_title">
            <input
              type="text"
              className="string optional form-control"
              id="note_title"
              name="note[title]"
              value={this.state.title}
              onChange={this.handleTitleChange.bind(this)}
              placeholder="Title"
            />
          </div>
          <div className="form-group form-group-no-label text optional note_content">
           <textarea
             className="text optional form-control"
             id="note_content"
             name="note[content]"
             value={this.state.content}
             // react complains about a missing handler on mutable fields.
             // we don't need actually this, as we handle changes on the RTE.
             onChange={this.noOp}
           >
           </textarea>
          </div>
        </div>
      </form>
    );
  }

  // prevent form submission by hitting enter.
  // changes will be asynchronously saved by ajax.
  handleFormSubmit(e) {
    e.preventDefault();
    return false;
  }

  handleTitleChange(e) {
    this.setState({ title: e.target.value }, this.handleChange);
  }

  handleContentChange(e) {
    this.setState({ content: e.target.value }, this.handleChange);
  }

  handleChange() {
    this.props.handleChange(
      {
        uid: this.state.uid,
        title: this.state.title,
        content: this.state.content
      }
    );
  }

  componentDidMount() {
    this.renderEditor();
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.uid === this.state.uid) {
      return;
    }

    // a different note is shown.
    this.editorNeedsReRender = true;

    this.setState({
      uid: nextProps.uid,
      title: nextProps.title,
      content: nextProps.content
    });
  }

  // only re-render the editor when `componentWillReceiveProps`
  // was called prior
  componentDidUpdate() {
    if (this.editorNeedsReRender) {
      this.editorNeedsReRender = false;
      this.renderEditor();
    }
  }

  renderEditor() {
    $.trumbowyg.svgPath = '<%= asset_path('trumbowyg/dist/ui/icons.svg') %>';

    const $form = $(ReactDOM.findDOMNode(this));
    const $editor = $form.find('textarea');

    $editor.trumbowyg('destroy');
    $editor.trumbowyg({
      btns: [
        ['formatting'],
        'btnGrp-semantic',
        'btnGrp-lists',
        ['link'],
        'btnGrp-justify',
        ['horizontalRule'],
        ['removeformat'],
        ['fullscreen']
      ]
    });
    $editor.on('tbwchange', this.handleContentChange.bind(this));
    $editor.on('tbwpaste', this.handleContentChange.bind(this));
  }

  noOp() {}
}
